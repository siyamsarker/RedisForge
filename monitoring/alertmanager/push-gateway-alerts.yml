# ================================================================================
# RedisForge - Push Gateway Monitoring Alerts
# Add these to your Prometheus alerting rules
# ================================================================================

groups:
  - name: push_gateway_alerts
    interval: 30s
    rules:
      # Alert if metrics haven't been pushed recently
      - alert: MetricsPushDelayed
        expr: (time() - push_time_seconds{job=~"redis-exporter|node-exporter|envoy"}) > 120
        for: 2m
        labels:
          severity: warning
          component: monitoring
        annotations:
          summary: "Metrics push delayed for {{ $labels.job }} on {{ $labels.instance }}"
          description: "No metrics pushed from {{ $labels.instance }} for over 2 minutes. Check redisforge-metrics-push service."
          runbook: "ssh {{ $labels.instance }} && sudo systemctl status redisforge-metrics-push"

      # Alert if Push Gateway is down
      - alert: PushGatewayDown
        expr: up{job="pushgateway"} == 0
        for: 1m
        labels:
          severity: critical
          component: monitoring
        annotations:
          summary: "Push Gateway is down"
          description: "Prometheus cannot scrape Push Gateway. Metrics collection is disrupted."
          runbook: "Check Push Gateway service: systemctl status pushgateway"

      # Alert if no metrics received from any instance
      - alert: NoMetricsReceived
        expr: absent(redis_up) or absent(node_cpu_seconds_total)
        for: 5m
        labels:
          severity: critical
          component: monitoring
        annotations:
          summary: "No metrics received from RedisForge cluster"
          description: "Neither Redis nor Node metrics are present. Check push-metrics.sh on all instances."

      # Alert if push-metrics.sh service is not running
      # Note: This requires node_exporter to expose systemd metrics
      - alert: MetricsPushServiceDown
        expr: node_systemd_unit_state{name="redisforge-metrics-push.service",state="active"} == 0
        for: 2m
        labels:
          severity: warning
          component: monitoring
        annotations:
          summary: "Metrics push service is down on {{ $labels.instance }}"
          description: "The redisforge-metrics-push systemd service is not active."
          runbook: "sudo systemctl restart redisforge-metrics-push"

      # Alert if Push Gateway memory usage is high
      - alert: PushGatewayHighMemory
        expr: (process_resident_memory_bytes{job="pushgateway"} / 1024 / 1024) > 512
        for: 10m
        labels:
          severity: warning
          component: monitoring
        annotations:
          summary: "Push Gateway memory usage > 512MB"
          description: "Push Gateway is consuming {{ $value | printf \"%.0f\" }}MB of memory. Consider increasing scrape frequency or investigating metric cardinality."

# ================================================================================
# SETUP INSTRUCTIONS
# ================================================================================
# 1. Add this file to your Prometheus configuration:
#
#    rule_files:
#      - /etc/prometheus/rules/push-gateway-alerts.yml
#
# 2. Reload Prometheus:
#    curl -X POST http://localhost:9090/-/reload
#
# 3. Configure Alertmanager to send notifications (email, Slack, PagerDuty)
#
# ================================================================================
# TROUBLESHOOTING COMMANDS
# ================================================================================
# Check if metrics are being pushed:
#   curl http://<pushgateway>:9091/metrics | grep push_time_seconds
#
# Check push service status on Redis instance:
#   sudo systemctl status redisforge-metrics-push
#   sudo journalctl -u redisforge-metrics-push -n 50
#
# Manually test push:
#   cd /home/ec2-user/RedisForge
#   ./scripts/push-metrics.sh
#
# Check Push Gateway health:
#   curl http://<pushgateway>:9091/-/healthy
#
# Check Prometheus targets:
#   curl http://<prometheus>:9090/api/v1/targets | jq '.data.activeTargets[] | select(.labels.job=="pushgateway")'
#
# ================================================================================
