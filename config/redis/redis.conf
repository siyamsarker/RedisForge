# ================================================================================
# RedisForge - Production-Ready Redis 8.2 OSS Configuration
# Optimized for high-throughput distributed systems (millions of requests/min)
# ================================================================================

# ------------------------------------------------------------------------------
# NETWORK CONFIGURATION
# ------------------------------------------------------------------------------
bind 0.0.0.0
port ${REDIS_PORT:-6379}
protected-mode yes

# TCP backlog for high-concurrency scenarios
# Ensure kernel net.core.somaxconn >= tcp-backlog
tcp-backlog 65535

# TCP keepalive to detect dead connections
tcp-keepalive 300

# Connection timeout (0 = never close idle connections)
timeout 300

# Maximum number of connected clients (tune based on server resources)
maxclients 100000

# ------------------------------------------------------------------------------
# AUTHENTICATION & SECURITY
# ------------------------------------------------------------------------------
requirepass ${REDIS_REQUIREPASS}
masterauth ${REDIS_REQUIREPASS}

# ACL configuration file
aclfile /etc/redis/users.acl

# Disable dangerous commands in production
rename-command FLUSHDB ""
rename-command FLUSHALL ""
rename-command CONFIG ""
rename-command SHUTDOWN SHUTDOWN_REDIS
rename-command DEBUG ""

# ------------------------------------------------------------------------------
# CLUSTER CONFIGURATION
# ------------------------------------------------------------------------------
cluster-enabled yes
cluster-config-file /data/nodes.conf
cluster-node-timeout 5000
cluster-replica-validity-factor 10
cluster-migration-barrier 1
cluster-require-full-coverage no

# Cluster announcement (set via environment variables for each node)
cluster-announce-ip ${REDIS_CLUSTER_ANNOUNCE_IP}
cluster-announce-port ${REDIS_CLUSTER_ANNOUNCE_PORT:-6379}
cluster-announce-bus-port ${REDIS_CLUSTER_ANNOUNCE_BUS_PORT:-16379}

# ------------------------------------------------------------------------------
# PERSISTENCE - AOF (Append Only File)
# ------------------------------------------------------------------------------
# Enable AOF for durability
appendonly ${REDIS_AOF_ENABLED:-yes}
appendfilename "appendonly.aof"

# fsync policy: everysec is a good balance between performance and durability
appendfsync ${REDIS_APPEND_FSYNC:-everysec}

# Disable fsync during rewrite to avoid latency spikes
no-appendfsync-on-rewrite yes

# Auto-rewrite AOF when it grows by 100% and is at least 64MB
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# AOF load truncated file on startup
aof-load-truncated yes

# Use RDB+AOF mixed persistence for faster restarts
aof-use-rdb-preamble yes

# Disable RDB snapshots (AOF provides durability)
save ""

# Data directory
dir /data

# ------------------------------------------------------------------------------
# MEMORY MANAGEMENT
# ------------------------------------------------------------------------------
# Maximum memory (set via environment variable, e.g., 8GB)
maxmemory ${REDIS_MAXMEMORY:-8gb}

# Eviction policy (allkeys-lru recommended for cache-like workloads)
maxmemory-policy ${REDIS_MAXMEMORY_POLICY:-allkeys-lru}

# Sample size for LRU/LFU algorithms (higher = more accurate but slower)
maxmemory-samples 10

# ------------------------------------------------------------------------------
# PERFORMANCE TUNING
# ------------------------------------------------------------------------------
# Thread I/O for better performance on multi-core systems
io-threads 4
io-threads-do-reads yes

# Lazy freeing for better performance
lazyfree-lazy-eviction yes
lazyfree-lazy-expire yes
lazyfree-lazy-server-del yes
replica-lazy-flush yes

# Disable transparent huge pages warnings
disable-thp yes

# Active defragmentation (helps with memory fragmentation)
activedefrag yes
active-defrag-ignore-bytes 100mb
active-defrag-threshold-lower 10
active-defrag-threshold-upper 100
active-defrag-cycle-min 5
active-defrag-cycle-max 75

# ------------------------------------------------------------------------------
# DATA STRUCTURE OPTIMIZATIONS
# ------------------------------------------------------------------------------
# Hash data structure optimizations
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# List data structure optimizations
list-max-ziplist-size -2
list-compress-depth 0

# Set data structure optimizations
set-max-intset-entries 512
set-max-listpack-entries 128
set-max-listpack-value 64

# Sorted set data structure optimizations
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog sparse representation
hll-sparse-max-bytes 3000

# ------------------------------------------------------------------------------
# REPLICATION
# ------------------------------------------------------------------------------
# Replication settings for high availability
replica-serve-stale-data yes
replica-read-only yes
repl-diskless-sync yes
repl-diskless-sync-delay 5
repl-diskless-sync-max-replicas 0
repl-diskless-load on-empty-db
repl-disable-tcp-nodelay no
repl-backlog-size 128mb
repl-backlog-ttl 3600
replica-priority 100
min-replicas-to-write 1
min-replicas-max-lag 10

# ------------------------------------------------------------------------------
# LOGGING
# ------------------------------------------------------------------------------
loglevel ${REDIS_LOGLEVEL:-notice}
logfile /var/log/redis/redis.log
syslog-enabled no

# Slow log configuration (log queries slower than 10ms)
slowlog-log-slower-than 10000
slowlog-max-len 128

# ------------------------------------------------------------------------------
# ADVANCED CONFIGURATION
# ------------------------------------------------------------------------------
# Notify keyspace events (useful for monitoring and pub/sub)
notify-keyspace-events "Ex"

# Lua scripting timeout (milliseconds)
lua-time-limit 5000

# Limit the maximum execution time of read queries (in milliseconds, 0 = unlimited)
# busy-reply-threshold 5000

# Client output buffer limits
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# ------------------------------------------------------------------------------
# MONITORING & METRICS
# ------------------------------------------------------------------------------
# Enable latency monitoring
latency-monitor-threshold 100

# Track operation counts
# No specific config needed; INFO command provides comprehensive metrics

# ------------------------------------------------------------------------------
# SECURITY HARDENING
# ------------------------------------------------------------------------------
# Protected mode ensures Redis doesn't accept connections from outside localhost
# unless explicitly configured (already set above)

# Hide Redis version in error messages
# Not available in redis.conf, but minimize info disclosure via ACLs

# ------------------------------------------------------------------------------
# NOTES FOR PRODUCTION DEPLOYMENT
# ------------------------------------------------------------------------------
# 1. Tune kernel parameters on the host:
#    - net.core.somaxconn = 65535
#    - vm.overcommit_memory = 1
#    - Disable transparent huge pages (THP)
#    - Set file descriptor limits (ulimit -n 100000)
#
# 2. Use dedicated EC2 instances with sufficient CPU and memory
#    Recommended: c5.4xlarge or r5.2xlarge for high-throughput workloads
#
# 3. Enable monitoring via redis_exporter for Prometheus
#
# 4. Regular backups using AOF and periodic snapshots
#
# 5. Monitor memory fragmentation and run activedefrag if > 1.5
# ================================================================================

