# ================================================================================
# RedisForge - Production-Ready Envoy Proxy Configuration
# Optimized for Redis cluster proxy handling millions of requests per minute
# ================================================================================

# ------------------------------------------------------------------------------
# ADMIN INTERFACE
# ------------------------------------------------------------------------------
admin:
  access_log:
  - name: envoy.access_loggers.file
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
      path: /var/log/envoy/admin_access.log
  address:
    socket_address:
      address: 0.0.0.0
      port_value: ${ENVOY_ADMIN_PORT:-9901}

# ------------------------------------------------------------------------------
# LAYERED RUNTIME (for dynamic configuration)
# ------------------------------------------------------------------------------
layered_runtime:
  layers:
  - name: static_layer
    static_layer:
      overload:
        global_downstream_max_connections: 100000

# ------------------------------------------------------------------------------
# STATIC RESOURCES
# ------------------------------------------------------------------------------
static_resources:
  # ----------------------------------------------------------------------------
  # LISTENERS
  # ----------------------------------------------------------------------------
  listeners:
  # Redis Listener (Plain TCP - no TLS)
  - name: redis_listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: ${ENVOY_LISTENER_PORT:-6379}
    per_connection_buffer_limit_bytes: 1048576
    filter_chains:
    - filters:
      - name: envoy.filters.network.redis_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.redis_proxy.v3.RedisProxy
          stat_prefix: redis_proxy
          settings:
            op_timeout: 0.100s
            enable_redirection: true
            enable_command_stats: true
            enable_hashtagging: true
            max_buffer_size_before_flush: 1024
            buffer_flush_timeout: 0.003s
            max_upstream_unknown_connections: 10000
            enable_read_policy: true
            read_policy: REPLICA
            downstream_auth_passwords:
            - inline_string: "${REDIS_REQUIREPASS}"
          prefix_routes:
            routes:
            - prefix: "/"
              cluster: redis_cluster
          latency_in_micros: true
          downstream_auth_username:
            inline_string: "${REDIS_ACL_USER:-default}"

  # ----------------------------------------------------------------------------
  # CLUSTERS
  # ----------------------------------------------------------------------------
  clusters:
  - name: redis_cluster
    type: STRICT_DNS
    dns_lookup_family: V4_ONLY
    connect_timeout: 0.250s
    per_connection_buffer_limit_bytes: 1048576
    lb_policy: MAGLEV  # Consistent hashing for better distribution
    
    # Redis Cluster Discovery Configuration
    cluster_type:
      name: envoy.clusters.redis
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.clusters.redis.v3.RedisClusterConfig
        # Topology refresh every 10 seconds
        cluster_refresh_rate:
          seconds: ${ENVOY_CLUSTER_REFRESH_SECONDS:-10}
        cluster_refresh_timeout:
          seconds: 5
        # Refresh on redirect responses
        redirect_refresh_interval:
          seconds: 5
        redirect_refresh_threshold: 10
        # Refresh on connection failures
        failure_refresh_threshold: 3
        host_degradation_consecutive_errors: 5
        # Authentication
        upstream_auth_password:
          inline_string: "${REDIS_REQUIREPASS}"
        upstream_auth_username:
          inline_string: "${REDIS_ACL_USER:-default}"
    
    # Seed nodes (initial discovery points)
    load_assignment:
      cluster_name: redis_cluster
      endpoints:
      - lb_endpoints:
        # Redis Master 1
        - endpoint:
            address:
              socket_address:
                address: ${REDIS_MASTER_1_HOST:-redis-master-1}
                port_value: ${REDIS_PORT:-6379}
            health_check_config:
              port_value: ${REDIS_PORT:-6379}
          load_balancing_weight: 100
        # Redis Master 2
        - endpoint:
            address:
              socket_address:
                address: ${REDIS_MASTER_2_HOST:-redis-master-2}
                port_value: ${REDIS_PORT:-6379}
            health_check_config:
              port_value: ${REDIS_PORT:-6379}
          load_balancing_weight: 100
        # Redis Master 3
        - endpoint:
            address:
              socket_address:
                address: ${REDIS_MASTER_3_HOST:-redis-master-3}
                port_value: ${REDIS_PORT:-6379}
            health_check_config:
              port_value: ${REDIS_PORT:-6379}
          load_balancing_weight: 100
    
    # Redis protocol options
    typed_extension_protocol_options:
      envoy.filters.network.redis_proxy:
        "@type": type.googleapis.com/envoy.extensions.filters.network.redis_proxy.v3.RedisProtocolOptions
        auth_password:
          inline_string: "${REDIS_REQUIREPASS}"
        auth_username:
          inline_string: "${REDIS_ACL_USER:-default}"
    
    # Health checks
    health_checks:
    - timeout: 2s
      interval: 5s
      interval_jitter: 1s
      unhealthy_threshold: 3
      healthy_threshold: 2
      no_traffic_interval: 5s
      unhealthy_interval: 3s
      reuse_connection: true
      custom_health_check:
        name: envoy.health_checkers.redis
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.health_checkers.redis.v3.Redis
          key: health_check_key
    
    # Circuit breakers for fault tolerance
    circuit_breakers:
      thresholds:
      - priority: DEFAULT
        max_connections: ${ENVOY_MAX_CONNECTIONS:-10000}
        max_pending_requests: ${ENVOY_MAX_PENDING_REQUESTS:-10000}
        max_requests: 100000
        max_retries: ${ENVOY_RETRY_ATTEMPTS:-3}
        retry_budget:
          budget_percent:
            value: 20.0
          min_retry_concurrency: 10
      - priority: HIGH
        max_connections: 20000
        max_pending_requests: 20000
        max_requests: 200000
        max_retries: 5
    
    # Outlier detection for automatic ejection of unhealthy hosts
    outlier_detection:
      consecutive_5xx: 5
      interval: 10s
      base_ejection_time: 30s
      max_ejection_percent: 50
      enforcing_consecutive_5xx: 100
      enforcing_success_rate: 100
      success_rate_minimum_hosts: 3
      success_rate_request_volume: 100
      success_rate_stdev_factor: 1900
      consecutive_gateway_failure: 3
      enforcing_consecutive_gateway_failure: 100
    
    # Connection pool settings
    max_requests_per_connection: 0  # Unlimited
    
    # Upstream connection options (no TLS by default)
    upstream_connection_options:
      tcp_keepalive:
        keepalive_probes: 3
        keepalive_time: 300
    
    # Common LB config
    common_lb_config:
      healthy_panic_threshold:
        value: 50.0
      zone_aware_lb_config:
        routing_enabled:
          value: 100.0
        min_cluster_size: 3
      update_merge_window: 1s

# ------------------------------------------------------------------------------
# STATS CONFIGURATION
# ------------------------------------------------------------------------------
stats_sinks:
- name: envoy.stat_sinks.prometheus
  typed_config:
    "@type": type.googleapis.com/envoy.extensions.stat_sinks.prometheus.v3.PrometheusSink
    emit_dynamic_metadata: true

stats_config:
  stats_tags:
  - tag_name: redis_cluster
    fixed_value: redis_cluster
  - tag_name: redis_command
    regex: "^cluster\\.redis_cluster\\.redis\\.command\\.([^.]+)\\."
  use_all_default_tags: true

# ------------------------------------------------------------------------------
# TRACING (Optional - for distributed tracing)
# ------------------------------------------------------------------------------
# tracing:
#   http:
#     name: envoy.tracers.zipkin
#     typed_config:
#       "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
#       collector_cluster: zipkin
#       collector_endpoint: "/api/v2/spans"
#       collector_endpoint_version: HTTP_JSON

# ------------------------------------------------------------------------------
# OVERLOAD MANAGER (for protecting against resource exhaustion)
# ------------------------------------------------------------------------------
overload_manager:
  refresh_interval: 0.25s
  resource_monitors:
  - name: envoy.resource_monitors.fixed_heap
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.resource_monitors.fixed_heap.v3.FixedHeapConfig
      max_heap_size_bytes: 2147483648  # 2GB
  actions:
  - name: envoy.overload_actions.shrink_heap
    triggers:
    - name: envoy.resource_monitors.fixed_heap
      threshold:
        value: 0.95
  - name: envoy.overload_actions.stop_accepting_requests
    triggers:
    - name: envoy.resource_monitors.fixed_heap
      threshold:
        value: 0.98

# ------------------------------------------------------------------------------
# NOTES FOR PRODUCTION DEPLOYMENT
# ------------------------------------------------------------------------------
# 1. Replace ${REDIS_MASTER_X_HOST} with actual EC2 private IPs or DNS names
# 2. Ensure all environment variables are set (REDIS_REQUIREPASS, etc.)
# 3. Monitor Envoy metrics at http://<envoy-host>:9901/stats/prometheus
# 4. Check cluster topology at http://<envoy-host>:9901/clusters
# 5. Use Envoy's admin interface for debugging: http://<envoy-host>:9901/
# 6. Tune buffer sizes and timeouts based on workload characteristics
# 7. Enable access logging for audit and debugging:
#    Add access_log configuration to listeners
# 8. Consider enabling rate limiting for DDoS protection
# 9. Test failover scenarios and topology changes regularly
# ================================================================================

